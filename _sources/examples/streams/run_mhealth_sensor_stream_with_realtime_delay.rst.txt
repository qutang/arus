.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_streams_run_mhealth_sensor_stream_with_realtime_delay.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_streams_run_mhealth_sensor_stream_with_realtime_delay.py:


Stream using mhealth data files with real-time delay
================================================================================

This example shows how to simulate real-time sensor streaming using existing data files.

Imports
--------


.. code-block:: default

    import logging
    import os
    from glob import glob
    import time

    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd

    from arus.core.stream import SensorFileSlidingWindowStream
    from arus.testing import load_test_data








Turn on logging info
-----------------------


.. code-block:: default

    logging.basicConfig(
        level=logging.DEBUG, format='[%(levelname)s]%(asctime)s <P%(process)d-%(threadName)s> %(message)s')








Load test mhealth data files
-----------------------------


.. code-block:: default

    files, sr = load_test_data(file_type='mhealth',
                               file_num='multiple',
                               exception_type='consistent_sr')








Setup stream
--------------
To simulate real-time streaming delay, set `simulate_reality` to be `True`.


.. code-block:: default

    window_size = 1
    stream = SensorFileSlidingWindowStream(data_source=files,
                                           window_size=window_size,
                                           sr=sr,
                                           buffer_size=900,
                                           storage_format='mhealth',
                                           simulate_reality=True,
                                           name='spades_2')








Start stream and read in data
------------------------------
To save time, only run for three windows, in total 3 seconds.


.. code-block:: default

    st = time.time()
    stream.start()
    chunk_sizes = []
    for data, _, _, _, _, name in stream.get_iterator():
        print("{},{},{}".format(
            data.iloc[0, 0], data.iloc[-1, 0], data.shape[0]))
        chunk_sizes.append(data.shape[0])
        if len(chunk_sizes) == 3:
            break
    lapsed_seconds = time.time() - st
    print('Stream has run for ' + str(lapsed_seconds) + ' seconds.')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    2018-08-31 20:11:00,2018-08-31 20:11:00.988000,80
    2018-08-31 20:11:01,2018-08-31 20:11:01.988000,80
    2018-08-31 20:11:02,2018-08-31 20:11:02.988000,80
    Stream has run for 3.0050008296966553 seconds.




Stop stream
-------------


.. code-block:: default

    stream.stop()








Plot stats of received data
-----------------------------


.. code-block:: default

    pd.Series(chunk_sizes).plot(
        title='chunk sizes of the given stream with \nwindow size of ' + str(window_size) + ' seconds, sampling rate at ' + str(sr) + ' Hz')
    fig = plt.hlines(y=sr * window_size,
                     xmin=0,
                     xmax=len(chunk_sizes),
                     linestyles='dashed')



.. image:: /examples/streams/images/sphx_glr_run_mhealth_sensor_stream_with_realtime_delay_001.png
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.254 seconds)


.. _sphx_glr_download_examples_streams_run_mhealth_sensor_stream_with_realtime_delay.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: run_mhealth_sensor_stream_with_realtime_delay.py <run_mhealth_sensor_stream_with_realtime_delay.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: run_mhealth_sensor_stream_with_realtime_delay.ipynb <run_mhealth_sensor_stream_with_realtime_delay.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
