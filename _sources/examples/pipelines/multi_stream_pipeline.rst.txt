.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_examples_pipelines_multi_stream_pipeline.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_pipelines_multi_stream_pipeline.py:


Demonstration of the usage of arus.core.Pipeline (3)
====================================================

The pipeline uses multiple sensor streams.


.. code-block:: default


    from arus.core.pipeline import Pipeline
    from arus.core.stream.generator_stream import GeneratorSlidingWindowStream
    from arus.core.accelerometer import generator
    from datetime import datetime
    import pandas as pd
    import logging


    def _pipeline_test_processor(chunk_list, **kwargs):
        import pandas as pd
        result = {'NAME': [],
                  'START_TIME': [], 'STOP_TIME': []}
        for data, st, et, prev_st, prev_et, name in chunk_list:
            result['NAME'].append(name)
            result['START_TIME'].append(data.iloc[0, 0])
            result['STOP_TIME'].append(data.iloc[-1, 0])
        result = pd.DataFrame.from_dict(result)
        return result


    if __name__ == "__main__":
        logging.basicConfig(
            level=logging.DEBUG, format='[%(levelname)s]%(asctime)s <P%(process)d-%(threadName)s> %(message)s')
        # test on multiple streams
        stream1_config = {
            "generator": generator.normal_dist,
            'kwargs': {
                "grange": 8,
                "buffer_size": 100,
                "sleep_interval": 0,
                "sigma": 1,
                "sr": 80
            }
        }

        stream2_config = {
            "generator": generator.normal_dist,
            'kwargs': {
                "grange": 4,
                "buffer_size": 400,
                "sleep_interval": 1,
                "sigma": 2,
                "sr": 50
            }
        }

        window_size = 12.8
        start_time = datetime.now()
        stream1 = GeneratorSlidingWindowStream(
            stream1_config, window_size=window_size, start_time_col=0, stop_time_col=0, name='stream-1')
        stream2 = GeneratorSlidingWindowStream(
            stream2_config, window_size=window_size, start_time_col=0, stop_time_col=0, name='stream-2')

        pipeline = Pipeline(max_processes=2, scheduler='threads')
        pipeline.add_stream(stream1)
        pipeline.add_stream(stream2)
        pipeline.set_processor(_pipeline_test_processor)
        # for multiple streams, we have to serve start_time to sync streams
        pipeline.start(start_time=start_time)
        results = []
        for result, st, et, prev_st, prev_et, name in pipeline.get_iterator():
            result['WINDOW_ST'] = st
            result['WINDOW_ET'] = et
            result['PREV_WINDOW_ST'] = prev_st
            result['PREV_WINDOW_ET'] = prev_et
            result['STREAM_NAME'] = name
            results.append(result)
            if len(results) == 10:
                break
        pipeline.stop()
        print(pd.concat(results, axis=0, sort=False))


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_examples_pipelines_multi_stream_pipeline.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: multi_stream_pipeline.py <multi_stream_pipeline.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: multi_stream_pipeline.ipynb <multi_stream_pipeline.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
